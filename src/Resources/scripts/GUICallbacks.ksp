import "Engine.ksp"
import "HideShow.ksp"
import "RandomTab.ksp"
import "StateManagerCallbacks.ksp"
import "FXTab.ksp"


macro GUI_CALLBACKS
    // scrambles both PP and FF without trying to line them up 
    on ui_control(Engine.scrambleButton)
        scrambleCallbackContent()
        Engine.scrambleButton2 := Engine.scrambleButton
    end on

    on ui_control(Engine.scrambleButton2)
        scrambleCallbackContent()
        Engine.scrambleButton := Engine.scrambleButton2
    end on
    
    // TODO: make the thing above but have it line up the PP and FF samples to the corresponding ones



    { current way of doing this is deprecated, use get_mod_idx( 0, "ENV 0" ) when you get kontakt 7 }
    on ui_control(Engine.attackKnob)
        callbackContent(0)
        // ADD VALUE TO SETTINGS
        GuiCallBacks.settingsSave[1, 0] := Engine.attackKnob
    end on

    on ui_control(Engine.decayKnob)
        callbackContent(1)

        // ADD VALUE TO SETTINGS
        GuiCallBacks.settingsSave[1, 1] := Engine.decayKnob
    end on

    on ui_control(Engine.sustainKnob)
        callbackContent(2)


        // ADD VALUE TO SETTINGS
        GuiCallBacks.settingsSave[1, 2] := Engine.sustainKnob

    end on

    on ui_control(Engine.releaseKnob)
        callbackContent(3)

        // ADD VALUE TO SETTINGS
        GuiCallBacks.settingsSave[1, 3] := Engine.releaseKnob

    end on

    on ui_control(Engine.attackCurveKnob)
        callbackContent(4)

        // ADD VALUE TO SETTINGS
        GuiCallBacks.settingsSave[1, 4] := Engine.attackCurveKnob

    end on


    on ui_control(Engine.reverseModeButton)
        callbackContent(5)

        // ADD VALUE TO SETTINGS
        GuiCallBacks.settingsSave[1, 5] := Engine.reverseModeButton

    end on

    on ui_control(Engine.finishDecayButton)
        // callbackContent(6)

        // ADD VALUE TO SETTINGS
        GuiCallBacks.settingsSave[1, 6] := Engine.finishDecayButton
    end on

    // change ranges to extend a bit upward for crossfade 
    on ui_control(Engine.crossfadeKnob)
        Engine.footerKnob0 -> value := Engine.crossfadeKnob

        callbackContent(7)

        set_text(Engine.crossfadeLabel, Engine.crossfadeKnob & " semitones")

        // ADD VALUE TO SETTINGS
        GuiCallBacks.settingsSave[1, 7] := Engine.crossfadeKnob
        GuiCallBacks.settingsSave[1, 32] := Engine.footerKnob0
    end on

    // FOOTER KNOBS
    on ui_control(Engine.footerKnob0)
        Engine.crossfadeKnob -> value := Engine.footerKnob0

        callbackContent(7)
        callbackContent(32)

        // ADD VALUE TO SETTINGS
        GuiCallBacks.settingsSave[1, 32] := Engine.footerKnob0
        GuiCallBacks.settingsSave[1, 7] := Engine.crossfadeKnob
    end on
    
    on ui_control(Engine.footerKnob1)
        Engine.sampleRate -> value := Engine.footerKnob1

        callbackContent(48)
        callbackContent(33)

        set_text(Engine.footerLabels1, get_engine_par_disp(ENGINE_PAR_FREQUENCY, -1, 0, $NI_BUS_OFFSET) & " hz")

        // ADD VALUE TO SETTINGS
        GuiCallBacks.settingsSave[1, 33] := Engine.footerKnob1
        GuiCallBacks.settingsSave[1, 48] := Engine.sampleRate
    end on
    
    on ui_control(Engine.footerKnob2)
        Engine.particleDryWet -> value := Engine.footerKnob2

        callbackContent(40)
        callbackContent(34)

        set_text(Engine.footerLabels2, round(int_to_real(Engine.particleDryWet) / 127.0 * 100.0) & "%")

        // ADD VALUE TO SETTINGS
        GuiCallBacks.settingsSave[1, 34] := Engine.footerKnob2
        GuiCallBacks.settingsSave[1, 40] := Engine.particleDryWet
    end on
    
    on ui_control(Engine.footerKnob3)
        Engine.delayMix -> value := Engine.footerKnob3

        callbackContent(52)
        callbackContent(35)

        set_text(Engine.footerLabels3, get_engine_par_disp(ENGINE_PAR_INSERT_EFFECT_OUTPUT_GAIN, -1, 2, $NI_BUS_OFFSET) & " dB")

        // ADD VALUE TO SETTINGS
        GuiCallBacks.settingsSave[1, 35] := Engine.footerKnob3
        GuiCallBacks.settingsSave[1, 52] := Engine.delayMix
    end on
    
    on ui_control(Engine.footerKnob4)
        Engine.reverbMix -> value := Engine.footerKnob4

        callbackContent(56)
        callbackContent(36)

        set_text(Engine.footerLabels4, get_engine_par_disp(ENGINE_PAR_INSERT_EFFECT_OUTPUT_GAIN, -1, 3, $NI_BUS_OFFSET) & " dB")

        // ADD VALUE TO SETTINGS
        GuiCallBacks.settingsSave[1, 36] := Engine.footerKnob4
        GuiCallBacks.settingsSave[1, 56] := Engine.reverbMix
    end on

    on ui_control(Engine.footerBitcrushButton)
        Engine.bitcrushOnOff -> value := Engine.footerBitcrushButton

        callbackContent(47)

        // ADD VALUE TO SETTINGS
        GuiCallBacks.settingsSave[1, 72] := Engine.footerBitcrushButton
        GuiCallBacks.settingsSave[1, 47] := Engine.bitcrushOnOff
    end on

    on ui_control(Engine.footerDropletsButton)
        Engine.particleMode -> value := Engine.footerDropletsButton

        callbackContent(38)

        // ADD VALUE TO SETTINGS
        GuiCallBacks.settingsSave[1, 73] := Engine.footerDropletsButton
        GuiCallBacks.settingsSave[1, 38] := Engine.particleMode
    end on

    on ui_control(Engine.footerDelayButton)
        Engine.delayOnOff -> value := Engine.footerDelayButton

        callbackContent(49)

        // ADD VALUE TO SETTINGS
        GuiCallBacks.settingsSave[1, 74] := Engine.footerDelayButton
        GuiCallBacks.settingsSave[1, 49] := Engine.delayOnOff
    end on

    on ui_control(Engine.footerReverbButton)
        Engine.reverbOnOff -> value := Engine.footerReverbButton

        callbackContent(54)

        // ADD VALUE TO SETTINGS
        GuiCallBacks.settingsSave[1, 75] := Engine.footerReverbButton
        GuiCallBacks.settingsSave[1, 54] := Engine.reverbOnOff
    end on



    // MAIN knob mod wheel
    on ui_control(Engine.mainKnobMod)
        callbackContent(37)

        // ADD VALUE TO SETTINGS
    end on

    STATE_MANAGER_CALLBACKS()

    on ui_control(Engine.prevPage)
        iterate_macro(PREV_PAGE_BUTTON) := 0 to 4 - 1
        // Engine.page1Button := 1
        // Engine.page2Button := 0
    end on

    on ui_control(Engine.nextPage)
        iterate_macro(NEXT_PAGE_BUTTON) := 0 to 4 - 1
        // Engine.page2Button := 1
        // Engine.page1Button := 0
    end on

    on ui_control(Engine.page0Button)
        iterate_macro(PREV_PAGE_BUTTON) := 0 to 4 - 1
    end on

    on ui_control(Engine.page1Button)
        iterate_macro(NEXT_PAGE_BUTTON) := 0 to 4 - 1
    end on

    iterate_macro(PRESET_BUTTON) := 0 to 7 - 1

    // random button callbacks
    iterate_macro(RAN_BUTTON_LOCKS_CALLBACKS) := 0 to 11 - 1
    RAN_BUTTON_LOCKS_ROWS_CALLBACKS()

end macro

macro FOOTER_KNOBS_CALLBACK(#n#)
    if (Engine.presetCategories#n# = 1 and Engine.currentPage[#n#] > 0)
        Engine.currentPage[#n#] := Engine.currentPage[#n#] - 1
        while(i < 7)
            Engine.presetPageIndex[i] -> TEXT := Engine.presetNames[#n#, (7 * Engine.currentPage[#n#]) + i]
            if(Engine.currentPresetState[#n#, i, Engine.currentPage[#n#]] = 1)
                Engine.presetPageIndex[i] -> value := 1
            else
                Engine.presetPageIndex[i] -> value := 0
            end if
            i := i + 1
        end while
        i := 0
    end if
end macro

// #n# represents the category index
macro PREV_PAGE_BUTTON(#n#)
    Engine.page0Button := 1
    Engine.page1Button := 0

    // if we are in the current category and the current page of that category is greater than 0, subtract a page
    if (Engine.presetCategories#n# = 1 and Engine.currentPage[#n#] > 0)
        Engine.currentPage[#n#] := Engine.currentPage[#n#] - 1

        while(i < 7)
            Engine.presetPageIndex[i] -> TEXT := Engine.presetNames[#n#, (7 * Engine.currentPage[#n#]) + i]
            // message("current Preset state[" & #n# & ", " & i & ", " & Engine.currentPage[#n#] & "]: " & Engine.currentPresetState[#n#, i, Engine.currentPage[#n#]])

            if(Engine.currentPresetState[#n#, i, Engine.currentPage[#n#]] = 1)
                Engine.presetPageIndex[i] -> value := 1
            else
                Engine.presetPageIndex[i] -> value := 0
            end if
            i := i + 1
        end while
        i := 0
    end if

    // if(Engine.page1Button = 1)
    //     Engine.page1Button := 1
    //     Engine.page2Button := 0
    // else
    //     Engine.page1Button := 0
    //     Engine.page2Button := 1
    // end if

end macro

macro NEXT_PAGE_BUTTON(#n#)
    Engine.page0Button := 0
    Engine.page1Button := 1

    if(Engine.presetCategories#n# = 1 and Engine.currentPage[#n#] < 1)
        Engine.currentPage[#n#] := Engine.currentPage[#n#] + 1

        while(i < 7)
            Engine.presetPageIndex[i] -> TEXT := Engine.presetNames[#n#, (7 * Engine.currentPage[#n#]) + i]

            // message("current Preset state[" & #n# & ", " & i & ", " & Engine.currentPage[#n#] & "]: " & Engine.currentPresetState[#n#, i, Engine.currentPage[#n#]])
            if(Engine.currentPresetState[#n#, i, Engine.currentPage[#n#]] = 1)
                Engine.presetPageIndex[i] -> value := 1
            else
                Engine.presetPageIndex[i] -> value := 0
            end if
            i := i + 1
        end while
        i := 0
    end if

    // if(Engine.page2Button = 1)
    //     Engine.page1Button := 0
    //     Engine.page2Button := 1
    // else
    //     Engine.page1Button := 1
    //     Engine.page2Button := 0
    // end if

end macro

macro PRESET_BUTTON(#n#)
    on ui_control(Engine.presetPageIndex#n#)
        Engine.presetPageIndex0 -> value := 0
        Engine.presetPageIndex1 -> value := 0
        Engine.presetPageIndex2 -> value := 0
        Engine.presetPageIndex3 -> value := 0
        Engine.presetPageIndex4 -> value := 0
        Engine.presetPageIndex5 -> value := 0
        Engine.presetPageIndex6 -> value := 0

        while(i < 7)
            Engine.presetColumn[i] := 0

            i := i + 1
        end while
        i := 0

        while(i < 4)
            while(j < 7)
                while(k < 2)
                    Engine.currentPresetState[i, j, k] := 0

                    if (i = Engine.currentCategory and j = #n# and k = Engine.currentPage[Engine.currentCategory])
                        Engine.currentPresetState[Engine.currentCategory, #n#, Engine.currentPage[Engine.currentCategory]] := 1
                    end if

                    GuiCallBacks.variableSettingsSave[27 + l] := Engine.currentPresetState[i, j, k]

                    l := l + 1
                    k := k + 1
                end while
                k := 0
                j := j + 1
            end while
            j := 0

            i := i + 1
        end while
        i := 0
        l := 0


        Engine.presetColumn[#n#] := 1
        // message("preset column " & Engine.presetColumn[#n#])

        Engine.presetPageIndex#n# -> value := 1
        // message("preset button " & Engine.presetPageIndex#n#)

        // select (Engine.currentCategory)
        //     case 0
        //         Engine.catLightUp[0] -> picture_state := 1
        //         Engine.catLightUp[1] -> picture_state := 0
        //         Engine.catLightUp[2] -> picture_state := 0
        //         Engine.catLightUp[3] -> picture_state := 0
        //     case 1
        //         Engine.catLightUp[0] -> picture_state := 0
        //         Engine.catLightUp[1] -> picture_state := 1
        //         Engine.catLightUp[2] -> picture_state := 0
        //         Engine.catLightUp[3] -> picture_state := 0
        //     case 2
        //         Engine.catLightUp[0] -> picture_state := 0
        //         Engine.catLightUp[1] -> picture_state := 0
        //         Engine.catLightUp[2] -> picture_state := 1
        //         Engine.catLightUp[3] -> picture_state := 0
        //     case 3
        //         Engine.catLightUp[0] -> picture_state := 0
        //         Engine.catLightUp[1] -> picture_state := 0
        //         Engine.catLightUp[2] -> picture_state := 0
        //         Engine.catLightUp[3] -> picture_state := 1
        // end select

        // store previous vals
        while (i < GuiCallBacks.numUIElements)
            GuiCallBacks.previousValues[i] := GuiCallBacks.settingsSave[1, i]
            i := i + 1
        end while
        i := 0

        // store previous path vals
        while (i < 22)
            GuiCallBacks.preSamplePathsIndexState[i] := GuiCallBacks.samplePathsIndexState[i]
            // message("BEFOREsamplePathsIndexState[" & i & "]: " & GuiCallBacks.samplePathsIndexState[i])
            i := i + 1
        end while
        i := 0

        GuiCallBacks.loadPresetArrayID[0] := load_array_str(GuiCallBacks._settingsSave, GuiCallBacks.basepath & "Data/" & Engine.currentCategory & "-" & search(Engine.presetColumn, 1) & "-" & Engine.currentPage[Engine.currentCategory] & "_UISettings.nka")
        GuiCallBacks.loadPresetArrayID[1] := load_array_str(GuiCallBacks.samplePathsIndexState, GuiCallBacks.basepath & "Data/" & Engine.currentCategory & "-" & search(Engine.presetColumn, 1) & "-" & Engine.currentPage[Engine.currentCategory] & "_PathSettings.nka")
        GuiCallBacks.loadPresetArrayID[2] := load_array_str(GuiCallBacks.variableSettingsSave, GuiCallBacks.basepath & "Data/" & Engine.currentCategory & "-" & search(Engine.presetColumn, 1) & "-" & Engine.currentPage[Engine.currentCategory] & "_VariableSettings.nka")

        while (GuiCallBacks.loadPresetArrayID[0] # -1)
            wait(1)
        end while

        while (GuiCallBacks.loadPresetArrayID[1] # -1)
            wait(1)
        end while

        while (GuiCallBacks.loadPresetArrayID[2] # -1)
            wait(1)
        end while

        loadPreset(0)


    end on
end macro

// ******************************* FUNCTIONS *****************************************

// check if the loop_par needs to be changed before  changing, change 384000 - 48000 to proper length once ready (TODO)
function setLoopModes()
    i := 0
    j := 0
    // set loop positions for each zone. 384000 is 8 seconds of samples in 48000
    if( Engine.reverseModeButton = 0)
        while (i < 22)
                // somehow this cant work on loading states, so for now im just going to always set the loop
                // if (get_loop_par(%NI_USER_ZONE_IDS[i], 0, $LOOP_PAR_MODE) # 1)
                // if (get_loop_par(%NI_USER_ZONE_IDS[i], 0, $LOOP_PAR_START) # 48000)
                // if (get_loop_par(%NI_USER_ZONE_IDS[i], 0, $LOOP_PAR_LENGTH) # 384000 - 48000)
                // if (get_loop_par(%NI_USER_ZONE_IDS[i], 0, $LOOP_PAR_XFADE) # 2000)
                
                GuiCallBacks.async_ID[j] := set_loop_par(%NI_USER_ZONE_IDS[i], 0, $LOOP_PAR_MODE, 1)
                j := j + 1

                // particle zone
                GuiCallBacks.async_ID[j] := set_loop_par(%NI_USER_ZONE_IDS[i + 22], 0, $LOOP_PAR_MODE, 1)
                j := j + 1

                GuiCallBacks.async_ID[j] := set_loop_par(%NI_USER_ZONE_IDS[i], 0, $LOOP_PAR_START, 48000)
                j := j + 1

                // particle zone
                GuiCallBacks.async_ID[j] := set_loop_par(%NI_USER_ZONE_IDS[i + 22], 0, $LOOP_PAR_START, 48000)
                j := j + 1

                GuiCallBacks.async_ID[j] := set_loop_par(%NI_USER_ZONE_IDS[i], 0, $LOOP_PAR_LENGTH, 384000 - 50000)
                j := j + 1

                GuiCallBacks.async_ID[j] := set_loop_par(%NI_USER_ZONE_IDS[i + 22], 0, $LOOP_PAR_LENGTH, 384000 - 50000)
                j := j + 1

                GuiCallBacks.async_ID[j] := set_loop_par(%NI_USER_ZONE_IDS[i], 0, $LOOP_PAR_XFADE, 2000)
                j := j + 1

                GuiCallBacks.async_ID[j] := set_loop_par(%NI_USER_ZONE_IDS[i + 22], 0, $LOOP_PAR_XFADE, 2000)
                j := j + 1


                // particle formant
                GuiCallBacks.async_ID[j] := set_loop_par(%NI_USER_ZONE_IDS[i + 44], 0, $LOOP_PAR_MODE, 1)
                j := j + 1

                // normal formant
                GuiCallBacks.async_ID[j] := set_loop_par(%NI_USER_ZONE_IDS[i + 66], 0, $LOOP_PAR_MODE, 1)
                j := j + 1

                // particle formant
                GuiCallBacks.async_ID[j] := set_loop_par(%NI_USER_ZONE_IDS[i + 44], 0, $LOOP_PAR_START, 48000)
                j := j + 1

                // normal formant
                GuiCallBacks.async_ID[j] := set_loop_par(%NI_USER_ZONE_IDS[i + 66], 0, $LOOP_PAR_START, 48000)
                j := j + 1

                // particle formant
                GuiCallBacks.async_ID[j] := set_loop_par(%NI_USER_ZONE_IDS[i + 44], 0, $LOOP_PAR_LENGTH, 384000 - 50000)
                j := j + 1

                // normal formant
                GuiCallBacks.async_ID[j] := set_loop_par(%NI_USER_ZONE_IDS[i + 66], 0, $LOOP_PAR_LENGTH, 384000 - 50000)
                j := j + 1

                // particle formant
                GuiCallBacks.async_ID[j] := set_loop_par(%NI_USER_ZONE_IDS[i + 44], 0, $LOOP_PAR_XFADE, 2000)
                j := j + 1

                // normal formant
                GuiCallBacks.async_ID[j] := set_loop_par(%NI_USER_ZONE_IDS[i + 66], 0, $LOOP_PAR_XFADE, 2000)
                j := j + 1

            i := i + 1
        end while
        i := 0
        j := 0
    end if

    if( Engine.reverseModeButton = 1 )
        while (i < 22)
            // if (get_loop_par(%NI_USER_ZONE_IDS[i], 0, $LOOP_PAR_MODE) # 2)
                // message("mode " & get_loop_par(%NI_USER_ZONE_IDS[i], 0, $LOOP_PAR_MODE))

                GuiCallBacks.async_ID[j] := set_loop_par(%NI_USER_ZONE_IDS[i], 0, $LOOP_PAR_MODE, 2)
                j := j + 1

                // particle zone
                GuiCallBacks.async_ID[j] := set_loop_par(%NI_USER_ZONE_IDS[i + 22], 0, $LOOP_PAR_MODE, 2)
                j := j + 1

                GuiCallBacks.async_ID[j] := set_loop_par(%NI_USER_ZONE_IDS[i + 44], 0, $LOOP_PAR_MODE, 2)
                j := j + 1

                // particle zone
                GuiCallBacks.async_ID[j] := set_loop_par(%NI_USER_ZONE_IDS[i + 66], 0, $LOOP_PAR_MODE, 2)
                j := j + 1

            // end if

            // if (get_loop_par(%NI_USER_ZONE_IDS[i], 0, $LOOP_PAR_START) # 48000 / 2)
                // message("start " & get_loop_par(%NI_USER_ZONE_IDS[i], 0, $LOOP_PAR_START))

                GuiCallBacks.async_ID[j] := set_loop_par(%NI_USER_ZONE_IDS[i], 0, $LOOP_PAR_START, 48000 / 2)
                j := j + 1

                GuiCallBacks.async_ID[j] := set_loop_par(%NI_USER_ZONE_IDS[i + 22], 0, $LOOP_PAR_START, 48000 / 2)
                j := j + 1

                GuiCallBacks.async_ID[j] := set_loop_par(%NI_USER_ZONE_IDS[i + 44], 0, $LOOP_PAR_START, 48000 / 2)
                j := j + 1

                GuiCallBacks.async_ID[j] := set_loop_par(%NI_USER_ZONE_IDS[i + 66], 0, $LOOP_PAR_START, 48000 / 2)
                j := j + 1


            // end if

            // if (get_loop_par(%NI_USER_ZONE_IDS[i], 0, $LOOP_PAR_LENGTH) # 384000 - 50000) //TODO: This check breaks it
                // message("$LOOP_PAR_LENGTH " & get_loop_par(%NI_USER_ZONE_IDS[i], 0, $LOOP_PAR_LENGTH))

                GuiCallBacks.async_ID[j] := set_loop_par(%NI_USER_ZONE_IDS[i], 0, $LOOP_PAR_LENGTH, 384000 - 50000)
                j := j + 1

                GuiCallBacks.async_ID[j] := set_loop_par(%NI_USER_ZONE_IDS[i + 22], 0, $LOOP_PAR_LENGTH, 384000 - 50000)
                j := j + 1

                GuiCallBacks.async_ID[j] := set_loop_par(%NI_USER_ZONE_IDS[i + 44], 0, $LOOP_PAR_LENGTH, 384000 - 50000)
                j := j + 1

                GuiCallBacks.async_ID[j] := set_loop_par(%NI_USER_ZONE_IDS[i + 66], 0, $LOOP_PAR_LENGTH, 384000 - 50000)
                j := j + 1


            // end if

            // if (get_loop_par(%NI_USER_ZONE_IDS[i], 0, $LOOP_PAR_XFADE) # 2000)
                // message("$LOOP_PAR_XFADE " & get_loop_par(%NI_USER_ZONE_IDS[i], 0, $LOOP_PAR_XFADE))

                GuiCallBacks.async_ID[j] := set_loop_par(%NI_USER_ZONE_IDS[i], 0, $LOOP_PAR_XFADE, 2000)
                j := j + 1

                GuiCallBacks.async_ID[j] := set_loop_par(%NI_USER_ZONE_IDS[i + 22], 0, $LOOP_PAR_XFADE, 2000)
                j := j + 1

                GuiCallBacks.async_ID[j] := set_loop_par(%NI_USER_ZONE_IDS[i + 44], 0, $LOOP_PAR_XFADE, 2000)
                j := j + 1

                GuiCallBacks.async_ID[j] := set_loop_par(%NI_USER_ZONE_IDS[i + 66], 0, $LOOP_PAR_XFADE, 2000)
                j := j + 1

            // end if

            i := i + 1
        end while
        i := 0
        j := 0
    end if

    while (GuiCallBacks.async_ID[i] > -1)
        wait_async(GuiCallBacks.async_ID[i])
        // GuiCallBacks.async_ID[i] := -1           //TODO: SEE IF THIS IS POSSIBLE
        i := i + 1
    end while
    i := 0

    while (i < 512) // TODO: remove later, following the other todo
        GuiCallBacks.async_ID[i] := -1
        i := i + 1
    end while
    i := 0

end function



// *****************************************************************************************************************************

function callbackContent(pointer)
    select(pointer)
        case 0 // Engine.attackKnob
            set_engine_par($ENGINE_PAR_ATTACK, Engine.attackKnob, 0, find_mod(0, "ENV 1"), find_target(0, find_mod(0, "ENV 1"), "ENV 1 -> VOLUME"))
            set_engine_par($ENGINE_PAR_ATTACK, Engine.attackKnob, 1, find_mod(1, "ENV 1"), find_target(1, find_mod(1, "ENV 1"), "ENV 1 -> VOLUME"))
            set_engine_par($ENGINE_PAR_ATTACK, Engine.attackKnob, 6, find_mod(6, "ENV 1"), find_target(6, find_mod(6, "ENV 1"), "ENV 1 -> VOLUME"))
            set_engine_par($ENGINE_PAR_ATTACK, Engine.attackKnob, 7, find_mod(7, "ENV 1"), find_target(7, find_mod(7, "ENV 1"), "ENV 1 -> VOLUME"))

            reset_ksp_timer
            set_text(Engine.attackLabel, get_engine_par_disp($ENGINE_PAR_ATTACK, 0, find_mod(0, "ENV 1"), find_target(0, find_mod(0, "ENV 1"), "ENV 1 -> VOLUME")) & " ms")
            Engine.lastUIChange := 0
        case 1 // Engine.decayKnob
            set_engine_par($ENGINE_PAR_DECAY, Engine.decayKnob, 0, find_mod(0, "ENV 1"), find_target(0, find_mod(0, "ENV 1"), "ENV 1 -> VOLUME"))
            set_engine_par($ENGINE_PAR_DECAY, Engine.decayKnob, 1, find_mod(1, "ENV 1"), find_target(1, find_mod(1, "ENV 1"), "ENV 1 -> VOLUME"))
            set_engine_par($ENGINE_PAR_DECAY, Engine.decayKnob, 6, find_mod(6, "ENV 1"), find_target(6, find_mod(6, "ENV 1"), "ENV 1 -> VOLUME"))
            set_engine_par($ENGINE_PAR_DECAY, Engine.decayKnob, 7, find_mod(7, "ENV 1"), find_target(7, find_mod(7, "ENV 1"), "ENV 1 -> VOLUME"))

            reset_ksp_timer
            set_text(Engine.decayLabel, get_engine_par_disp($ENGINE_PAR_DECAY, 0, find_mod(0, "ENV 1"), find_target(0, find_mod(0, "ENV 1"), "ENV 1 -> VOLUME")) & " ms")
            Engine.lastUIChange := 1


        case 2 // Engine.sustainKnob
            set_engine_par($ENGINE_PAR_SUSTAIN, Engine.sustainKnob, 0, find_mod(0, "ENV 1"), find_target(0, find_mod(0, "ENV 1"), "ENV 1 -> VOLUME"))
            set_engine_par($ENGINE_PAR_SUSTAIN, Engine.sustainKnob, 1, find_mod(1, "ENV 1"), find_target(1, find_mod(1, "ENV 1"), "ENV 1 -> VOLUME"))
            set_engine_par($ENGINE_PAR_SUSTAIN, Engine.sustainKnob, 6, find_mod(6, "ENV 1"), find_target(6, find_mod(6, "ENV 1"), "ENV 1 -> VOLUME"))
            set_engine_par($ENGINE_PAR_SUSTAIN, Engine.sustainKnob, 7, find_mod(7, "ENV 1"), find_target(7, find_mod(7, "ENV 1"), "ENV 1 -> VOLUME"))

            reset_ksp_timer
            set_text(Engine.sustainLabel, get_engine_par_disp($ENGINE_PAR_SUSTAIN, 0, find_mod(0, "ENV 1"), find_target(0, find_mod(0, "ENV 1"), "ENV 1 -> VOLUME"))& " dB")
            Engine.lastUIChange := 2

        case 3 // Engine.releaseKnob
            set_engine_par($ENGINE_PAR_RELEASE, Engine.releaseKnob, 0, find_mod(0, "ENV 1"), find_target(0, find_mod(0, "ENV 1"), "ENV 1 -> VOLUME"))
            set_engine_par($ENGINE_PAR_RELEASE, Engine.releaseKnob, 1, find_mod(1, "ENV 1"), find_target(1, find_mod(1, "ENV 1"), "ENV 1 -> VOLUME"))
            set_engine_par($ENGINE_PAR_RELEASE, Engine.releaseKnob, 6, find_mod(6, "ENV 1"), find_target(6, find_mod(6, "ENV 1"), "ENV 1 -> VOLUME"))
            set_engine_par($ENGINE_PAR_RELEASE, Engine.releaseKnob, 7, find_mod(7, "ENV 1"), find_target(7, find_mod(7, "ENV 1"), "ENV 1 -> VOLUME"))

            reset_ksp_timer
            set_text(Engine.releaseLabel, get_engine_par_disp($ENGINE_PAR_RELEASE, 0, find_mod(0, "ENV 1"), find_target(0, find_mod(0, "ENV 1"), "ENV 1 -> VOLUME")) & " ms")
            Engine.lastUIChange := 3

        case 4 // Engine.attackCurveKnob
            set_engine_par($ENGINE_PAR_ATK_CURVE, Engine.attackCurveKnob, 0, find_mod(0, "ENV 1"), find_target(0, find_mod(0, "ENV 1"), "ENV 1 -> VOLUME"))
            set_engine_par($ENGINE_PAR_ATK_CURVE, Engine.attackCurveKnob, 1, find_mod(1, "ENV 1"), find_target(1, find_mod(1, "ENV 1"), "ENV 1 -> VOLUME"))
            set_engine_par($ENGINE_PAR_ATK_CURVE, Engine.attackCurveKnob, 6, find_mod(6, "ENV 1"), find_target(6, find_mod(6, "ENV 1"), "ENV 1 -> VOLUME"))
            set_engine_par($ENGINE_PAR_ATK_CURVE, Engine.attackCurveKnob, 7, find_mod(7, "ENV 1"), find_target(7, find_mod(7, "ENV 1"), "ENV 1 -> VOLUME"))

            reset_ksp_timer
            set_text(Engine.attackCurveLabel, get_engine_par_disp($ENGINE_PAR_ATK_CURVE, 0, find_mod(0, "ENV 1"), find_target(0, find_mod(0, "ENV 1"), "ENV 1 -> VOLUME")) & '%')
            Engine.lastUIChange := 4
        case 5 // Engine.reverseModeButton
            { set loop positions for each zone. 384000 is 8 seconds of samples in 48000}
            call setLoopModes()

        case 6 // Engine.finishDecayButton

        case 7 // Engine.crossfadeKnob

            crossfadeKnob(0, Engine.crossfadeKnob)

            reset_ksp_timer
            Engine.lastUIChange := 5

        case 8 // RANDOMIZE PP locks
        case 9
        case 10
        case 11
        case 12
        case 13
        case 14
        case 15
        case 16
        case 17
        case 18
        case 19 // RANDOMIZE FF locks
        case 20
        case 21
        case 22
        case 23
        case 24
        case 25
        case 26
        case 27
        case 28
        case 29
        case 30 // lockRow[0]
            if(Engine.lockRow0 = 1)
                Engine.numCurrentLocks[0] := 11
                iterate_macro(SET_PP_LOCKS_ON) := 0 to 11 - 1
                while(i < 11)
                    Engine.lockedRandomizers[i] := 1
                    GuiCallBacks.variableSettingsSave[i] := 1
                    i := i + 1
                end while
            else
                Engine.numCurrentLocks[0] := 0
                iterate_macro(SET_PP_LOCKS_OFF) := 0 to 11 - 1
                while(i < 11)
                    Engine.lockedRandomizers[i] := 0
                    GuiCallBacks.variableSettingsSave[i] := 0
                    i := i + 1
                end while
            end if
            i := 0
            GuiCallBacks.settingsSave[1, 30] := Engine.lockRow0
        case 31 // lockRow[1]
            if(Engine.lockRow1 = 1)
                Engine.numCurrentLocks[1] := 11
                iterate_macro(SET_FF_LOCKS_ON) := 0 to 11 - 1
                while(i < 11)
                    Engine.lockedRandomizers[i + 11] := 1
                    GuiCallBacks.variableSettingsSave[i + 11] := 1
                    i := i + 1
                end while
            else
                Engine.numCurrentLocks[1] := 0
                iterate_macro(SET_FF_LOCKS_OFF) := 0 to 11 - 1
                while(i < 11)
                    Engine.lockedRandomizers[i + 11] := 0
                    GuiCallBacks.variableSettingsSave[i + 11] := 0
                    i := i + 1
                end while
            end if
            i := 0
            GuiCallBacks.settingsSave[1, 31] := Engine.lockRow1
        case 32 // footerKnobs[0]
            reset_ksp_timer
            set_text(Engine.footerLabels0, Engine.crossfadeKnob & " semitones")
            Engine.lastUIChange := 6
            // do thing
        case 33 // footerKnobs[1]
            reset_ksp_timer
            Engine.lastUIChange := 7
            set_text(Engine.footerLabels1, "test2")
            // do thing
        case 34 // footerKnobs[2]
            reset_ksp_timer
            Engine.lastUIChange := 8
            // do thing
        case 35 // footerKnobs[3]
            reset_ksp_timer
            Engine.lastUIChange := 9
            set_text(Engine.footerLabels3, "test4")
            // do thing
        case 36 // footerKnobs[4]
            reset_ksp_timer
            Engine.lastUIChange := 10
            set_text(Engine.footerLabels4, "test5")
            // do thing
        case 37 // Main Mod wheel
            Engine.modBackgroundLabel -> picture_state := Engine.mainKnobMod
            Engine.modBackgroundLabelBlur -> picture_state := Engine.mainKnobMod
            set_controller(103, Engine.mainKnobMod)
            GuiCallBacks.settingsSave[1, 37] := Engine.mainKnobMod
        case 38 // particle button
            if(Engine.particleMode = 0)
                set_controller(104, 0)
                Engine.particleDryWet -> picture := "/Sliders/Slider150by11BiPolarDisabled"
                Engine.Rate_knob -> picture := "/Sliders/Slider150by11Disabled"
                Engine.timeVariation -> picture := "/Sliders/Slider150by11Disabled"
                Engine.particleOctave -> picture := "/Sliders/Slider150by11-3StateDisabled"
                Engine.particleSpread -> picture := "/Sliders/Slider150by11Disabled"
                Engine.particleVolVariation -> picture := "/Sliders/Slider150by11Disabled"
                Engine.particleCrossfadeKnob -> picture := "/Sliders/Slider150by11-7StateDisabled"
                Engine.particleStretchSpeed -> picture := "/Sliders/Slider150by11BiPolarDisabled"
                Engine.particleStretchFormant -> picture := "/Sliders/Slider150by11BiPolarDisabled"
                Engine.particleAttackKnob -> picture := "/Sliders/Slider150by11Disabled"
                Engine.particleDecayKnob -> picture := "/Sliders/Slider150by11Disabled"
                Engine.particleSustainKnob -> picture := "/Sliders/Slider150by11Disabled"
                Engine.particleReleaseKnob -> picture := "/Sliders/Slider150by11Disabled"
                Engine.particleAttackCurveKnob -> PICTURE := "/Knobs/AttackCharacterKnobDisabled"
                Engine.particleReverseMode -> PICTURE := "/Buttons/40-40buttonReverseDisabled"
                Engine.particleFXButton -> PICTURE := "/Buttons/33-33fxTabDisabled"

                Engine.particleMixLabel -> FONT_TYPE := Engine.initFont
                Engine.particleRateLabel -> FONT_TYPE := Engine.initFont
                Engine.particleVariationLabel -> FONT_TYPE := Engine.initFont
                Engine.particleOctaveLabel -> FONT_TYPE := Engine.initFont
                Engine.particleSpreadLabel -> FONT_TYPE := Engine.initFont
                Engine.particleVolVariationLabel -> FONT_TYPE := Engine.initFont
                Engine.particleCrossfadeKnobLabel -> FONT_TYPE := Engine.initFont
                Engine.particleStretchSpeedLabel -> FONT_TYPE := Engine.initFont
                Engine.particleStretchFormantLabel -> FONT_TYPE := Engine.initFont
                Engine.particleAttackKnobLabel -> FONT_TYPE := Engine.initFont
                Engine.particleDecayKnobLabel -> FONT_TYPE := Engine.initFont
                Engine.particleSustainKnobLabel -> FONT_TYPE := Engine.initFont
                Engine.particleReleaseKnobLabel -> FONT_TYPE := Engine.initFont
                Engine.particleAttackCurveKnobLabel -> FONT_TYPE := Engine.initFont

            else
                set_controller(104, Engine.particleDryWet)
                Engine.particleDryWet -> picture := "/Sliders/Slider150by11BiPolar"
                Engine.Rate_knob -> picture := "/Sliders/Slider150by11"
                Engine.timeVariation -> picture := "/Sliders/Slider150by11"
                Engine.particleOctave -> picture := "/Sliders/Slider150by11-3State"
                Engine.particleSpread -> picture := "/Sliders/Slider150by11"
                Engine.particleVolVariation -> picture := "/Sliders/Slider150by11"
                Engine.particleCrossfadeKnob -> picture := "/Sliders/Slider150by11-7State"

                Engine.particleAttackKnob -> picture := "/Sliders/Slider150by11"
                Engine.particleDecayKnob -> picture := "/Sliders/Slider150by11"
                Engine.particleSustainKnob -> picture := "/Sliders/Slider150by11"
                Engine.particleReleaseKnob -> picture := "/Sliders/Slider150by11"
                Engine.particleAttackCurveKnob -> PICTURE := "/Knobs/AttackCharacterKnob"
                Engine.particleReverseMode -> PICTURE := "/Buttons/40-40buttonReverse"
                Engine.particleFXButton -> PICTURE := "/Buttons/33-33fxTab"

                Engine.particleMixLabel -> FONT_TYPE := Engine.initFontFull
                Engine.particleRateLabel -> FONT_TYPE := Engine.initFontFull
                Engine.particleVariationLabel -> FONT_TYPE := Engine.initFontFull
                Engine.particleOctaveLabel -> FONT_TYPE := Engine.initFontFull
                Engine.particleSpreadLabel -> FONT_TYPE := Engine.initFontFull
                Engine.particleVolVariationLabel -> FONT_TYPE := Engine.initFontFull
                Engine.particleCrossfadeKnobLabel -> FONT_TYPE := Engine.initFontFull

                Engine.particleAttackKnobLabel -> FONT_TYPE := Engine.initFontFull
                Engine.particleDecayKnobLabel -> FONT_TYPE := Engine.initFontFull
                Engine.particleSustainKnobLabel -> FONT_TYPE := Engine.initFontFull
                Engine.particleReleaseKnobLabel -> FONT_TYPE := Engine.initFontFull
                Engine.particleAttackCurveKnobLabel -> FONT_TYPE := Engine.initFontFull

                if(Engine.particleStretchMode = 1)
                    Engine.particleStretchSpeed -> picture := "/Sliders/Slider150by11BiPolar"
                    Engine.particleStretchFormant -> picture := "/Sliders/Slider150by11BiPolar"
                    Engine.particleStretchSpeedLabel -> FONT_TYPE := Engine.initFontFull
                    Engine.particleStretchFormantLabel -> FONT_TYPE := Engine.initFontFull
                end if
            end if
        case 39 // tempo sync button
            if (Engine.Tempo_sync = 0)
                Engine.Rate_knob := ((Engine.free_knob - 20) * 1000000) / 980
                // set_knob_defval(Rate_knob, 489796)
                // set_knob_label(Rate_knob, (free_knob / 1000) & "." & ((free_knob mod 1000) / 100) & "" & ((free_knob mod 100) / 10) & "" & ((free_knob mod 10)))
                // set_knob_unit(Rate_knob, KNOB_UNIT_MS)
            else
                Engine.Rate_knob := (Engine.sync_knob * 1000001) / 17
                // set_knob_defval(Rate_knob, (5 * 1000001) / 17)
                // set_knob_label(Rate_knob, !tempoNames[sync_knob])
                // set_knob_unit(Rate_knob, KNOB_UNIT_NONE)
            end if
            GuiCallBacks.settingsSave[1, 41] := Engine.Rate_knob

        case 40 // Engine.particleDryWet
            if(Engine.particleMode = 1)
                set_controller(104, Engine.particleDryWet)
            end if
            reset_ksp_timer
            Engine.lastUIChange := 11

            set_text(Engine.particleMixLabel, Engine.particleDryWet & "%")
        case 41 // particle rate
            if (Engine.Tempo_sync = 0)
                Engine.Free_knob := ((Engine.Rate_knob * 980) / 1000000) + 20

                GuiCallBacks.variableSettingsSave[24] := Engine.Free_knob
                {set_knob_label(Rate_knob, (free_knob / 1000) & "." & ((free_knob mod 1000) / 100) & "" & ((free_knob mod 100) / 10) & "" & ((free_knob mod 10)))}
            else
                Engine.Sync_knob := (Engine.Rate_knob * 18) / 1000001
                
                GuiCallBacks.variableSettingsSave[25] := Engine.Sync_knob
                {set_knob_label(Rate_knob, !tempoNames[sync_knob])}
            end if
            reset_ksp_timer
            Engine.lastUIChange := 12


            GuiCallBacks.settingsSave[1, 41] := Engine.Rate_knob

        case 42 // time var
            reset_ksp_timer
            Engine.lastUIChange := 13

        case 43 // eq on off
            if(Engine.eqOnOff = 0)
                Engine.highShelf -> picture := "/Sliders/Slider100by11BiPolarDisabled"
                Engine.midBand -> picture := "/Sliders/Slider100by11BiPolarDisabled"
                Engine.lowShelf -> picture := "/Sliders/Slider100by11BiPolarDisabled"
                Engine.highShelfLabel -> FONT_TYPE := Engine.initFont
                Engine.midBandLabel -> FONT_TYPE := Engine.initFont
                Engine.lowShelfLabel -> FONT_TYPE := Engine.initFont
                set_engine_par (ENGINE_PAR_EFFECT_BYPASS, 1, -1, 1, $NI_BUS_OFFSET)
                set_engine_par (ENGINE_PAR_EFFECT_BYPASS, 1, -1, 1, $NI_BUS_OFFSET + 1)
            else
                Engine.highShelf -> picture := "/Sliders/Slider100by11BiPolar"
                Engine.midBand -> picture := "/Sliders/Slider100by11BiPolar"
                Engine.lowShelf -> picture := "/Sliders/Slider100by11BiPolar"
                Engine.highShelfLabel -> FONT_TYPE := Engine.initFontFull
                Engine.midBandLabel -> FONT_TYPE := Engine.initFontFull
                Engine.lowShelfLabel -> FONT_TYPE := Engine.initFontFull
                set_engine_par (ENGINE_PAR_EFFECT_BYPASS, 0, -1, 1, $NI_BUS_OFFSET)

                if(Engine.particleFXButton = 1)
                    set_engine_par (ENGINE_PAR_EFFECT_BYPASS, 0, -1, 1, $NI_BUS_OFFSET + 1)
                end if

            end if
        case 44 // high shelf
            set_engine_par (ENGINE_PAR_SEQ_HF_GAIN, Engine.highShelf, -1, 1, $NI_BUS_OFFSET)
            set_engine_par (ENGINE_PAR_SEQ_HF_GAIN, Engine.highShelf, -1, 1, $NI_BUS_OFFSET + 1)

            reset_ksp_timer
            Engine.lastUIChange := 14
        case 45 // mid band
            set_engine_par (ENGINE_PAR_SEQ_LMF_GAIN, Engine.midBand, -1, 1, $NI_BUS_OFFSET)
            set_engine_par (ENGINE_PAR_SEQ_LMF_GAIN, Engine.midBand, -1, 1, $NI_BUS_OFFSET + 1)

            reset_ksp_timer
            Engine.lastUIChange := 15
        case 46 // low shelf
            set_engine_par (ENGINE_PAR_SEQ_LF_GAIN, Engine.lowShelf, -1, 1, $NI_BUS_OFFSET)
            set_engine_par (ENGINE_PAR_SEQ_LF_GAIN, Engine.lowShelf, -1, 1, $NI_BUS_OFFSET + 1)

            reset_ksp_timer
            Engine.lastUIChange := 16
        case 47 // bitcrush on off
            if(Engine.bitcrushOnOff = 0)
                Engine.sampleRate -> picture := "/Sliders/Slider100by11Disabled"
                Engine.sampleRateLabel -> FONT_TYPE := Engine.initFont
                Engine.bits -> picture := "/Sliders/Slider100by11Disabled"
                Engine.bitsLabel -> FONT_TYPE := Engine.initFont

                set_engine_par (ENGINE_PAR_EFFECT_BYPASS, 1, -1, 0, $NI_BUS_OFFSET)
                set_engine_par (ENGINE_PAR_EFFECT_BYPASS, 1, -1, 0, $NI_BUS_OFFSET + 1)
            else
                Engine.sampleRate -> picture := "/Sliders/Slider100by11"
                Engine.sampleRateLabel -> FONT_TYPE := Engine.initFontFull
                
                Engine.bits -> picture := "/Sliders/Slider100by11"
                Engine.bitsLabel -> FONT_TYPE := Engine.initFontFull

                set_engine_par (ENGINE_PAR_EFFECT_BYPASS, 0, -1, 0, $NI_BUS_OFFSET)

                if(Engine.particleFXButton = 1)
                    set_engine_par (ENGINE_PAR_EFFECT_BYPASS, 0, -1, 0, $NI_BUS_OFFSET + 1)
                end if

            end if
        case 48 // sample rate

            set_engine_par (ENGINE_PAR_FREQUENCY, Engine.sampleRate, -1, 0, $NI_BUS_OFFSET)
            set_engine_par (ENGINE_PAR_FREQUENCY, Engine.sampleRate, -1, 0, $NI_BUS_OFFSET + 1)

            reset_ksp_timer
            Engine.lastUIChange := 17
        case 49 // delay on off
            if(Engine.delayOnOff = 0)
                Engine.delayRate -> picture := "/Sliders/Slider100by11Disabled"
                Engine.delayFeedback -> picture := "/Sliders/Slider100by11Disabled"
                Engine.delayMix -> picture := "/Sliders/Slider100by11Disabled"
                Engine.delayRateLabel -> FONT_TYPE := Engine.initFont
                Engine.delayFeedbackLabel -> FONT_TYPE := Engine.initFont
                Engine.delayMixLabel -> FONT_TYPE := Engine.initFont
                Engine.delayPingPong -> picture := "/Buttons/41-40pingPongDisabled"
                set_engine_par (ENGINE_PAR_EFFECT_BYPASS, 1, -1, 2, $NI_BUS_OFFSET)
                set_engine_par (ENGINE_PAR_EFFECT_BYPASS, 1, -1, 2, $NI_BUS_OFFSET + 1)
            else
                Engine.delayRate -> picture := "/Sliders/Slider100by11"
                Engine.delayFeedback -> picture := "/Sliders/Slider100by11"
                Engine.delayMix -> picture := "/Sliders/Slider100by11"
                Engine.delayRateLabel -> FONT_TYPE := Engine.initFontFull
                Engine.delayFeedbackLabel -> FONT_TYPE := Engine.initFontFull
                Engine.delayMixLabel -> FONT_TYPE := Engine.initFontFull
                Engine.delayPingPong -> picture := "/Buttons/41-40pingPong"
                set_engine_par (ENGINE_PAR_EFFECT_BYPASS, 0, -1, 2, $NI_BUS_OFFSET)

                if(Engine.particleFXButton = 1)
                    set_engine_par (ENGINE_PAR_EFFECT_BYPASS, 0, -1, 2, $NI_BUS_OFFSET + 1)
                end if

            end if
        case 50 // delay rate
            set_engine_par (ENGINE_PAR_RDL_TIME, Engine.delayRate, -1, 2, $NI_BUS_OFFSET)
            set_engine_par (ENGINE_PAR_RDL_TIME, Engine.delayRate, -1, 2, $NI_BUS_OFFSET + 1)

            reset_ksp_timer
            Engine.lastUIChange := 18
        case 51 // Engine.delayFeedback
            set_engine_par (ENGINE_PAR_RDL_FEEDBACK, Engine.delayFeedback, -1, 2, $NI_BUS_OFFSET)
            set_engine_par (ENGINE_PAR_RDL_FEEDBACK, Engine.delayFeedback, -1, 2, $NI_BUS_OFFSET + 1)

            reset_ksp_timer
            Engine.lastUIChange := 19
        case 52 // delay mix
            set_engine_par (ENGINE_PAR_INSERT_EFFECT_OUTPUT_GAIN, Engine.delayMix, -1, 2, $NI_BUS_OFFSET)
            set_engine_par (ENGINE_PAR_INSERT_EFFECT_OUTPUT_GAIN, Engine.delayMix, -1, 2, $NI_BUS_OFFSET + 1)

            reset_ksp_timer
            Engine.lastUIChange := 20
        case 53 // delay ping pong
            set_engine_par (ENGINE_PAR_RDL_PINGPONG, Engine.delayPingPong, -1, 2, $NI_BUS_OFFSET)
            set_engine_par (ENGINE_PAR_RDL_PINGPONG, Engine.delayPingPong, -1, 2, $NI_BUS_OFFSET + 1)

        case 54 // reverb on off
            if(Engine.reverbOnOff = 0)
                Engine.reverbDecay -> picture := "/Sliders/Slider100by11Disabled"
                Engine.reverbMix -> picture := "/Sliders/Slider100by11Disabled"
                Engine.reverbReverse -> picture := "/Buttons/40-40buttonReverseDisabled"
                Engine.reverbDecayLabel -> FONT_TYPE := Engine.initFont
                Engine.reverbMixLabel -> FONT_TYPE := Engine.initFont
                set_engine_par (ENGINE_PAR_EFFECT_BYPASS, 1, -1, 3, $NI_BUS_OFFSET)
                set_engine_par (ENGINE_PAR_EFFECT_BYPASS, 1, -1, 3, $NI_BUS_OFFSET + 1)
            else
                Engine.reverbDecay -> picture := "/Sliders/Slider100by11"
                Engine.reverbMix -> picture := "/Sliders/Slider100by11"
                Engine.reverbReverse -> picture := "/Buttons/40-40buttonReverse"
                Engine.reverbDecayLabel -> FONT_TYPE := Engine.initFontFull
                Engine.reverbMixLabel -> FONT_TYPE := Engine.initFontFull
                set_engine_par (ENGINE_PAR_EFFECT_BYPASS, 0, -1, 3, $NI_BUS_OFFSET)

                if(Engine.particleFXButton = 1)
                    set_engine_par (ENGINE_PAR_EFFECT_BYPASS, 0, -1, 3, $NI_BUS_OFFSET + 1)
                end if
            end if
        case 55 // reverb decay
            set_engine_par ($ENGINE_PAR_IRC_LENGTH_RATIO_LR, Engine.reverbDecay, -1, 3, $NI_BUS_OFFSET)
            set_engine_par ($ENGINE_PAR_IRC_LENGTH_RATIO_LR, Engine.reverbDecay, -1, 3, $NI_BUS_OFFSET + 1)

            reset_ksp_timer
            Engine.lastUIChange := 21
        case 56 // reverb mix
            set_engine_par (ENGINE_PAR_INSERT_EFFECT_OUTPUT_GAIN, Engine.reverbMix, -1, 3, $NI_BUS_OFFSET)
            set_engine_par (ENGINE_PAR_INSERT_EFFECT_OUTPUT_GAIN, Engine.reverbMix, -1, 3, $NI_BUS_OFFSET + 1)

            reset_ksp_timer
            Engine.lastUIChange := 22
        case 57 // reverb reverse button
            set_engine_par (ENGINE_PAR_IRC_REVERSE, Engine.reverbReverse, -1, 3, $NI_BUS_OFFSET)
            set_engine_par (ENGINE_PAR_IRC_REVERSE, Engine.reverbReverse, -1, 3, $NI_BUS_OFFSET + 1)

        case 58
            reset_ksp_timer
            Engine.lastUIChange := 23
        case 59
            reset_ksp_timer
            Engine.lastUIChange := 24
        case 60 

            reset_ksp_timer
            Engine.lastUIChange := 25
        case 61
            crossfadeKnob(1, Engine.particleCrossfadeKnob)

            reset_ksp_timer
            Engine.lastUIChange := 26
        case 62

        case 63
            if (Engine.particleStretchMode = 1 and Engine.particleMode = 1)
                Engine.particleStretchSpeed -> picture := "/Sliders/Slider150by11BiPolar"
                Engine.particleStretchFormant -> picture := "/Sliders/Slider150by11BiPolar"
                Engine.particleStretchSpeedLabel -> FONT_TYPE := Engine.initFontFull
                Engine.particleStretchFormantLabel -> FONT_TYPE := Engine.initFontFull
            else
                Engine.particleStretchSpeed -> picture := "/Sliders/Slider150by11BiPolarDisabled"
                Engine.particleStretchFormant -> picture := "/Sliders/Slider150by11BiPolarDisabled"
                Engine.particleStretchSpeedLabel -> FONT_TYPE := Engine.initFont
                Engine.particleStretchFormantLabel -> FONT_TYPE := Engine.initFont
            end if

        case 64
            set_engine_par (ENGINE_PAR_SPEED, Engine.particleStretchSpeed, 4, 0, -1)
            set_engine_par (ENGINE_PAR_SPEED, Engine.particleStretchSpeed, 5, 0, -1)

            reset_ksp_timer
            Engine.lastUIChange := 27
        case 65
            set_engine_par (ENGINE_PAR_FORMANT_SHIFT, Engine.particleStretchFormant, 4, 0, -1)
            set_engine_par (ENGINE_PAR_FORMANT_SHIFT, Engine.particleStretchFormant, 5, 0, -1)

            reset_ksp_timer
            Engine.lastUIChange := 28
        case 66 // ADSR particle attack Engine.particleAttackKnob
            set_engine_par($ENGINE_PAR_ATTACK, Engine.particleAttackKnob, 2, find_mod(2, "ENV 1"), find_target(2, find_mod(2, "ENV 1"), "ENV 1 -> VOLUME"))
            set_engine_par($ENGINE_PAR_ATTACK, Engine.particleAttackKnob, 3, find_mod(3, "ENV 1"), find_target(3, find_mod(3, "ENV 1"), "ENV 1 -> VOLUME"))
            set_engine_par($ENGINE_PAR_ATTACK, Engine.particleAttackKnob, 4, find_mod(4, "ENV 1"), find_target(4, find_mod(4, "ENV 1"), "ENV 1 -> VOLUME"))
            set_engine_par($ENGINE_PAR_ATTACK, Engine.particleAttackKnob, 5, find_mod(5, "ENV 1"), find_target(5, find_mod(5, "ENV 1"), "ENV 1 -> VOLUME"))

            reset_ksp_timer
            set_text(Engine.particleAttackKnobLabel, get_engine_par_disp($ENGINE_PAR_ATTACK, 2, find_mod(2, "ENV 1"), find_target(2, find_mod(2, "ENV 1"), "ENV 1 -> VOLUME")) & " ms")
            Engine.lastUIChange := 29
        case 67 // Engine.particleDecayKnob
            set_engine_par($ENGINE_PAR_DECAY, Engine.particleDecayKnob, 2, find_mod(2, "ENV 1"), find_target(2, find_mod(2, "ENV 1"), "ENV 1 -> VOLUME"))
            set_engine_par($ENGINE_PAR_DECAY, Engine.particleDecayKnob, 3, find_mod(3, "ENV 1"), find_target(3, find_mod(3, "ENV 1"), "ENV 1 -> VOLUME"))
            set_engine_par($ENGINE_PAR_DECAY, Engine.particleDecayKnob, 4, find_mod(4, "ENV 1"), find_target(4, find_mod(4, "ENV 1"), "ENV 1 -> VOLUME"))
            set_engine_par($ENGINE_PAR_DECAY, Engine.particleDecayKnob, 5, find_mod(5, "ENV 1"), find_target(5, find_mod(5, "ENV 1"), "ENV 1 -> VOLUME"))

            reset_ksp_timer
            set_text(Engine.particleDecayKnobLabel, get_engine_par_disp($ENGINE_PAR_DECAY, 2, find_mod(2, "ENV 1"), find_target(2, find_mod(2, "ENV 1"), "ENV 1 -> VOLUME")) & " ms")
            Engine.lastUIChange := 30
        case 68 // Engine.particleSustainKnob
            set_engine_par($ENGINE_PAR_SUSTAIN, Engine.particleSustainKnob, 2, find_mod(2, "ENV 1"), find_target(2, find_mod(2, "ENV 1"), "ENV 1 -> VOLUME"))
            set_engine_par($ENGINE_PAR_SUSTAIN, Engine.particleSustainKnob, 3, find_mod(3, "ENV 1"), find_target(3, find_mod(3, "ENV 1"), "ENV 1 -> VOLUME"))
            set_engine_par($ENGINE_PAR_SUSTAIN, Engine.particleSustainKnob, 4, find_mod(4, "ENV 1"), find_target(4, find_mod(4, "ENV 1"), "ENV 1 -> VOLUME"))
            set_engine_par($ENGINE_PAR_SUSTAIN, Engine.particleSustainKnob, 5, find_mod(5, "ENV 1"), find_target(5, find_mod(5, "ENV 1"), "ENV 1 -> VOLUME"))

            reset_ksp_timer
            set_text(Engine.particleSustainKnobLabel, get_engine_par_disp($ENGINE_PAR_SUSTAIN, 2, find_mod(2, "ENV 1"), find_target(2, find_mod(2, "ENV 1"), "ENV 1 -> VOLUME")) & " dB")
            Engine.lastUIChange := 31
        case 69 // Engine.particleReleaseKnob
            set_engine_par($ENGINE_PAR_RELEASE, Engine.particleReleaseKnob, 2, find_mod(2, "ENV 1"), find_target(2, find_mod(2, "ENV 1"), "ENV 1 -> VOLUME"))
            set_engine_par($ENGINE_PAR_RELEASE, Engine.particleReleaseKnob, 3, find_mod(3, "ENV 1"), find_target(3, find_mod(3, "ENV 1"), "ENV 1 -> VOLUME"))
            set_engine_par($ENGINE_PAR_RELEASE, Engine.particleReleaseKnob, 4, find_mod(4, "ENV 1"), find_target(4, find_mod(4, "ENV 1"), "ENV 1 -> VOLUME"))
            set_engine_par($ENGINE_PAR_RELEASE, Engine.particleReleaseKnob, 5, find_mod(5, "ENV 1"), find_target(5, find_mod(5, "ENV 1"), "ENV 1 -> VOLUME"))

            reset_ksp_timer
            set_text(Engine.particleReleaseKnobLabel, get_engine_par_disp($ENGINE_PAR_RELEASE, 2, find_mod(2, "ENV 1"), find_target(2, find_mod(2, "ENV 1"), "ENV 1 -> VOLUME")) & " ms")
            Engine.lastUIChange := 32
        case 70 // Engine.particleAttackCurveKnob
            set_engine_par($ENGINE_PAR_ATK_CURVE, Engine.particleAttackCurveKnob, 2, find_mod(2, "ENV 1"), find_target(2, find_mod(2, "ENV 1"), "ENV 1 -> VOLUME"))
            set_engine_par($ENGINE_PAR_ATK_CURVE, Engine.particleAttackCurveKnob, 3, find_mod(3, "ENV 1"), find_target(3, find_mod(3, "ENV 1"), "ENV 1 -> VOLUME"))
            set_engine_par($ENGINE_PAR_ATK_CURVE, Engine.particleAttackCurveKnob, 4, find_mod(4, "ENV 1"), find_target(4, find_mod(4, "ENV 1"), "ENV 1 -> VOLUME"))
            set_engine_par($ENGINE_PAR_ATK_CURVE, Engine.particleAttackCurveKnob, 5, find_mod(5, "ENV 1"), find_target(5, find_mod(5, "ENV 1"), "ENV 1 -> VOLUME"))

            reset_ksp_timer
            set_text(Engine.particleattackCurveKnobLabel, get_engine_par_disp($ENGINE_PAR_ATK_CURVE, 2, find_mod(2, "ENV 1"), find_target(2, find_mod(2, "ENV 1"), "ENV 1 -> VOLUME")) & "%")
            Engine.lastUIChange := 33
        case 71 // FX affect particles button
            if(Engine.particleFXButton = 0)
                set_engine_par (ENGINE_PAR_EFFECT_BYPASS, 1, -1, 0, $NI_BUS_OFFSET + 1)
                set_engine_par (ENGINE_PAR_EFFECT_BYPASS, 1, -1, 1, $NI_BUS_OFFSET + 1)
                set_engine_par (ENGINE_PAR_EFFECT_BYPASS, 1, -1, 2, $NI_BUS_OFFSET + 1)
                set_engine_par (ENGINE_PAR_EFFECT_BYPASS, 1, -1, 3, $NI_BUS_OFFSET + 1)

                if(Engine.bitcrushOnOff = 0)
                    Engine.sampleRate -> picture := "/Sliders/Slider100by11Disabled"
                    Engine.bits -> picture := "/Sliders/Slider100by11Disabled"

                    Engine.sampleRateLabel -> FONT_TYPE := Engine.initFont
                    Engine.bitsLabel -> FONT_TYPE := Engine.initFont
                end if
                if(Engine.eqOnOff = 0)
                    Engine.highShelf -> picture := "/Sliders/Slider100by11Disabled"
                    Engine.midBand -> picture := "/Sliders/Slider100by11Disabled"
                    Engine.lowShelf -> picture := "/Sliders/Slider100by11Disabled"

                    Engine.highShelfLabel -> FONT_TYPE := Engine.initFont
                    Engine.midBandLabel -> FONT_TYPE := Engine.initFont
                    Engine.lowShelfLabel -> FONT_TYPE := Engine.initFont
                end if
                if(Engine.delayOnOff = 0)
                    Engine.delayRate -> picture := "/Sliders/Slider100by11Disabled"
                    Engine.delayFeedback -> picture := "/Sliders/Slider100by11Disabled"
                    Engine.delayMix -> picture := "/Sliders/Slider100by11Disabled"
                    // Engine.delayPingPong -> picture := "/Sliders/Slider100by11Disabled"

                    Engine.delayRateLabel -> FONT_TYPE := Engine.initFont
                    Engine.delayFeedbackLabel -> FONT_TYPE := Engine.initFont
                    Engine.delayMixLabel -> FONT_TYPE := Engine.initFont
                end if
                if(Engine.reverbOnOff = 0)
                    Engine.reverbDecay -> picture := "/Sliders/Slider100by11Disabled"
                    Engine.reverbReverse -> picture := "/Sliders/Slider100by11Disabled"
                    // Engine.reverbDecay -> picture := "/Sliders/Slider100by11Disabled"

                    Engine.reverbDecayLabel -> FONT_TYPE := Engine.initFont
                    Engine.reverbMixLabel -> FONT_TYPE := Engine.initFont
                end if
            else
                if(Engine.particleFXButton = 1)
                    if(Engine.bitcrushOnOff = 1)
                        set_engine_par (ENGINE_PAR_EFFECT_BYPASS, 0, -1, 0, $NI_BUS_OFFSET + 1)
                        
                        // Engine.sampleRate -> picture := "/Sliders/Slider100by11"
                        // // bits -> picture := "/Sliders/Slider100by11Disabled"
                        // Engine.sampleRateLabel -> FONT_TYPE := Engine.initFontFull
                        // // bits -> FONT_TYPE := Engine.initFont
                    end if

                    if(Engine.eqOnOff = 1)
                        set_engine_par (ENGINE_PAR_EFFECT_BYPASS, 0, -1, 1, $NI_BUS_OFFSET + 1)
                        // Engine.highShelf -> picture := "/Sliders/Slider100by11"
                        // Engine.midBand -> picture := "/Sliders/Slider100by11"
                        // Engine.lowShelf -> picture := "/Sliders/Slider100by11"

                        // Engine.highShelfLabel -> FONT_TYPE := Engine.initFontFull
                        // Engine.midBandLabel -> FONT_TYPE := Engine.initFontFull
                        // Engine.lowShelfLabel -> FONT_TYPE := Engine.initFontFull
                    end if

                    if(Engine.delayOnOff = 1)
                        set_engine_par (ENGINE_PAR_EFFECT_BYPASS, 0, -1, 2, $NI_BUS_OFFSET + 1)
                        // Engine.delayRate -> picture := "/Sliders/Slider100by11"
                        // Engine.delayFeedback -> picture := "/Sliders/Slider100by11"
                        // Engine.delayMix -> picture := "/Sliders/Slider100by11"
                        // // Engine.delayPingPong -> picture := "/Sliders/Slider100by11Disabled"

                        // Engine.delayRateLabel -> FONT_TYPE := Engine.initFontFull
                        // Engine.delayFeedbackLabel -> FONT_TYPE := Engine.initFontFull
                        // Engine.delayMixLabel -> FONT_TYPE := Engine.initFontFull
                    end if

                    if(Engine.reverbOnOff = 1)
                        set_engine_par (ENGINE_PAR_EFFECT_BYPASS, 0, -1, 3, $NI_BUS_OFFSET + 1)
                        // Engine.reverbDecay -> picture := "/Sliders/Slider100by11"
                        // Engine.reverbReverse -> picture := "/Sliders/Slider100by11"
                        // // reversebutton -> picture := "/Sliders/Slider100by11Disabled"

                        // Engine.reverbDecayLabel -> FONT_TYPE := Engine.initFontFull
                        // Engine.reverbMixLabel -> FONT_TYPE := Engine.initFontFull
                    end if
                end if
            end if
        case 72 // bits cb
            set_engine_par (ENGINE_PAR_BITS, Engine.bits, -1, 0, $NI_BUS_OFFSET)
            set_engine_par (ENGINE_PAR_BITS, Engine.bits, -1, 0, $NI_BUS_OFFSET + 1)

            reset_ksp_timer
            Engine.lastUIChange := 34
        case 73

        case 74 


        case 77
            if (Engine.stretchOnOff = 1)
                Engine.stretchSpeed -> picture := "/Sliders/Slider100by11BiPolar"
                Engine.stretchFormant -> picture := "/Sliders/Slider100by11BiPolar"
                Engine.stretchSpeedLabel -> FONT_TYPE := Engine.initFontFull
                Engine.stretchFormantLabel -> FONT_TYPE := Engine.initFontFull
            else
                Engine.stretchSpeed -> picture := "/Sliders/Slider100by11BiPolarDisabled"
                Engine.stretchFormant -> picture := "/Sliders/Slider100by11BiPolarDisabled"
                Engine.stretchSpeedLabel -> FONT_TYPE := Engine.initFont
                Engine.stretchFormantLabel -> FONT_TYPE := Engine.initFont
            end if

        case 78 // stretch speed
            set_engine_par (ENGINE_PAR_SPEED, Engine.stretchSpeed, 6, 0, -1)
            set_engine_par (ENGINE_PAR_SPEED, Engine.stretchSpeed, 7, 0, -1)

            reset_ksp_timer
            Engine.lastUIChange := 35
        case 79
            set_engine_par (ENGINE_PAR_FORMANT_SHIFT, Engine.stretchFormant, 6, 0, -1)
            set_engine_par (ENGINE_PAR_FORMANT_SHIFT, Engine.stretchFormant, 7, 0, -1)

            reset_ksp_timer
            Engine.lastUIChange := 36
        case 128 


    end select
end function

function scrambleCallbackContent()
    while (i < 22)
        if (Engine.lockedRandomizers[i] = 0)
            GuiCallBacks.preSamplePathsIndexState[i] := GuiCallBacks.samplePathsIndexState[i]
            GuiCallBacks.samplePathsIndexState[i] := random( 0, Engine.num_unique_samples - 1 )

            // change picture to appropriate sample 
            changePictureToSample(i)

            // if needs to be changed, change it
            if (GuiCallBacks.preSamplePathsIndexState[i] # GuiCallBacks.samplePathsIndexState[i])
                GuiCallBacks.async_ID[j] := set_sample(%NI_USER_ZONE_IDS[i], atmosSamplePaths[GuiCallBacks.samplePathsIndexState[i], i])
                j := j + 1

                // for particle group
                GuiCallBacks.async_ID[j] := set_sample(%NI_USER_ZONE_IDS[i + 22], atmosSamplePaths[GuiCallBacks.samplePathsIndexState[i], i])
                j := j + 1

                // for particle group
                GuiCallBacks.async_ID[j] := set_sample(%NI_USER_ZONE_IDS[i + 44], atmosSamplePaths[GuiCallBacks.samplePathsIndexState[i], i])
                j := j + 1

                // for particle group
                GuiCallBacks.async_ID[j] := set_sample(%NI_USER_ZONE_IDS[i + 66], atmosSamplePaths[GuiCallBacks.samplePathsIndexState[i], i])
                j := j + 1

                // if(i < 11)
                //     Engine.randomPPLocks[i] -> text := GuiCallBacks.samplePathsIndexState[i]
                // else
                //     Engine.randomFFLocks[i - 11] -> text := GuiCallBacks.samplePathsIndexState[i]
                // end if

            end if

        end if
        i := i + 1

    end while
    i := 0
    j := 0

    // collect async ids in j since we used j earlier
    while (GuiCallBacks.async_ID[j] > -1)
        wait_async(GuiCallBacks.async_ID[j])
        j := j + 1
    end while
    j := 0

    while (i < 512)
        GuiCallBacks.async_ID[i] := -1
        i := i + 1
    end while
    i := 0

    call setLoopModes() // TODO: optimize


end function

function changePictureToSample(ptr)
    if(ptr < 11)
        select(GuiCallBacks.samplePathsIndexState[ptr])
            case 0
                Engine.randomPPLocks[ptr] -> picture := "/Buttons/1Button"
            case 1
                Engine.randomPPLocks[ptr] -> picture := "/Buttons/2Button"
            case 2
                Engine.randomPPLocks[ptr] -> picture := "/Buttons/3Button"
            case 3
                Engine.randomPPLocks[ptr] -> picture := "/Buttons/4Button"
            case 4 // up to however many samples you have
                Engine.randomPPLocks[ptr] -> picture := "/Buttons/5Button"

        end select
    else
        select(GuiCallBacks.samplePathsIndexState[ptr])
            case 0
                Engine.randomFFLocks[ptr - 11] -> picture := "/Buttons/1Button"
            case 1
                Engine.randomFFLocks[ptr - 11] -> picture := "/Buttons/2Button"
            case 2
                Engine.randomFFLocks[ptr - 11] -> picture := "/Buttons/3Button"
            case 3
                Engine.randomFFLocks[ptr - 11] -> picture := "/Buttons/4Button"
            case 4 // up to however many samples you have
                Engine.randomFFLocks[ptr - 11] -> picture := "/Buttons/5Button"

        end select
    end if    
end function

function crossfadeKnob(ptr, crossfade_val)
    // initialize async_ID array with -1s
    while (i < 512) //TODO: Initialize the index after waiting async instead of doing all values
        GuiCallBacks.async_ID[i] := -1
        i := i + 1
    end while
    i := 0
    j := 0

    // Set the zone low and high key valus for Atmos PP/FF Groups
    if(ptr = 0)
        while (i < 22)
            if(i < 11)
                GuiCallBacks.async_ID[j] := set_zone_par(%NI_USER_ZONE_IDS[i],$ZONE_PAR_LOW_KEY,19 + (7 * i))
                j := j + 1
                GuiCallBacks.async_ID[j] := set_zone_par(%NI_USER_ZONE_IDS[i],$ZONE_PAR_HIGH_KEY,25 + (7 * i) + crossfade_val)
                j := j + 1

                GuiCallBacks.async_ID[j] := set_zone_par(%NI_USER_ZONE_IDS[i + 66],$ZONE_PAR_LOW_KEY,19 + (7 * i))
                j := j + 1
                GuiCallBacks.async_ID[j] := set_zone_par(%NI_USER_ZONE_IDS[i + 66],$ZONE_PAR_HIGH_KEY,25 + (7 * i) + crossfade_val)
                j := j + 1

            end if

            if(i >= 11)
                GuiCallBacks.async_ID[j] := set_zone_par(%NI_USER_ZONE_IDS[i],$ZONE_PAR_LOW_KEY,19 + (7 * (i - 11)))
                j := j + 1
                GuiCallBacks.async_ID[j] := set_zone_par(%NI_USER_ZONE_IDS[i],$ZONE_PAR_HIGH_KEY,25 + (7 * (i - 11)) + crossfade_val)
                j := j + 1

                GuiCallBacks.async_ID[j] := set_zone_par(%NI_USER_ZONE_IDS[i + 66],$ZONE_PAR_LOW_KEY,19 + (7 * (i - 11)))
                j := j + 1
                GuiCallBacks.async_ID[j] := set_zone_par(%NI_USER_ZONE_IDS[i + 66],$ZONE_PAR_HIGH_KEY,25 + (7 * (i - 11)) + crossfade_val)
                j := j + 1

            end if

            { set the crossfade key }
            GuiCallBacks.async_ID[j] := set_zone_par(%NI_USER_ZONE_IDS[i],$ZONE_PAR_FADE_LOW_KEY,crossfade_val)
            j := j + 1
            GuiCallBacks.async_ID[j] := set_zone_par(%NI_USER_ZONE_IDS[i],$ZONE_PAR_FADE_HIGH_KEY,crossfade_val)
            j := j + 1

            { set the crossfade key }
            GuiCallBacks.async_ID[j] := set_zone_par(%NI_USER_ZONE_IDS[i + 66],$ZONE_PAR_FADE_LOW_KEY,crossfade_val)
            j := j + 1
            GuiCallBacks.async_ID[j] := set_zone_par(%NI_USER_ZONE_IDS[i + 66],$ZONE_PAR_FADE_HIGH_KEY,crossfade_val)
            j := j + 1

            i := i + 1
        end while
        i := 0
        j := 0
    else
        i := 22
        while (i < 66)
            if(i < 33)
                GuiCallBacks.async_ID[j] := set_zone_par(%NI_USER_ZONE_IDS[i],$ZONE_PAR_LOW_KEY,19 + (7 * (i - 22)))
                j := j + 1
                GuiCallBacks.async_ID[j] := set_zone_par(%NI_USER_ZONE_IDS[i],$ZONE_PAR_HIGH_KEY,25 + (7 * (i - 22)) + crossfade_val)
                j := j + 1
            end if

            if(i >= 33 and i < 44)
                GuiCallBacks.async_ID[j] := set_zone_par(%NI_USER_ZONE_IDS[i],$ZONE_PAR_LOW_KEY,19 + (7 * (i - 33)))
                j := j + 1
                GuiCallBacks.async_ID[j] := set_zone_par(%NI_USER_ZONE_IDS[i],$ZONE_PAR_HIGH_KEY,25 + (7 * (i - 33)) + crossfade_val)
                j := j + 1
            end if

            if(i >= 44 and i < 55)
                GuiCallBacks.async_ID[j] := set_zone_par(%NI_USER_ZONE_IDS[i],$ZONE_PAR_LOW_KEY,19 + (7 * (i - 44)))
                j := j + 1
                GuiCallBacks.async_ID[j] := set_zone_par(%NI_USER_ZONE_IDS[i],$ZONE_PAR_HIGH_KEY,25 + (7 * (i - 44)) + crossfade_val)
                j := j + 1
            end if

            if(i >= 55 and i < 66)
                GuiCallBacks.async_ID[j] := set_zone_par(%NI_USER_ZONE_IDS[i],$ZONE_PAR_LOW_KEY,19 + (7 * (i - 55)))
                j := j + 1
                GuiCallBacks.async_ID[j] := set_zone_par(%NI_USER_ZONE_IDS[i],$ZONE_PAR_HIGH_KEY,25 + (7 * (i - 55)) + crossfade_val)
                j := j + 1
            end if

            { set the crossfade key }
            GuiCallBacks.async_ID[j] := set_zone_par(%NI_USER_ZONE_IDS[i],$ZONE_PAR_FADE_LOW_KEY,crossfade_val)
            j := j + 1
            GuiCallBacks.async_ID[j] := set_zone_par(%NI_USER_ZONE_IDS[i],$ZONE_PAR_FADE_HIGH_KEY,crossfade_val)
            j := j + 1
            i := i + 1
        end while
        i := 0
        j := 0
    end if

    while (GuiCallBacks.async_ID[i] > -1)
        wait_async(GuiCallBacks.async_ID[i])
        i := i + 1
    end while
    i := 0
end function

FX_TAB_CALLBACKS()
PARTICLE_TAB_CALLBACKS()
HIDE_CALLBACKS()
